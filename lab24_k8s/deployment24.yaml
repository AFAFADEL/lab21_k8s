# ------------------------- MySQL Deployment -------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpass
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

# ------------------------- Node.js Deployment -------------------------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
    spec:
      initContainers:
      - name: init-mysql-db
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpass
        command:
          [
            "sh", "-c",
            "echo 'Creating database and user...' && \
             mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD -e \"CREATE DATABASE IF NOT EXISTS ivolve; CREATE USER IF NOT EXISTS 'appuser'@'%' IDENTIFIED BY 'apppass'; GRANT ALL PRIVILEGES ON ivolve.* TO 'appuser'@'%'; FLUSH PRIVILEGES;\""
          ]

      containers:
      - name: nodejs
        image: lenaadel/nodejs-app:v1
        ports:
        - containerPort: 3000
        env:
        - name: DB_HOST
          value: mysql
        - name: DB_USER
          value: appuser
        - name: DB_PASSWORD
          value: apppass

        # ------------------- Lab 22 Probes -------------------
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3

        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 3
        # -----------------------------------------------------

        # ------------------- Lab 23 Resource Management -------------------
        resources:
          requests:
            cpu: "1"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "2Gi"
        # -----------------------------------------------------------------

---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-service
spec:
  selector:
    app: nodejs
  ports:
    - port: 3000
      targetPort: 3000
  type: NodePort
# ------------------------- Lab 24: NetworkPolicy -------------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-to-mysql
spec:
  podSelector:
    matchLabels:
      app: mysql        # تطبق السياسة على بودات MySQL فقط
  policyTypes:
    - Ingress           # تحدد أن السياسة للتحكم بالوارد فقط
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: nodejs   # يسمح فقط للبودات التي تحمل هذا اللابل (Node.js) بالوصول
      ports:
        - protocol: TCP
          port: 3306        # فقط على منفذ MySQL
